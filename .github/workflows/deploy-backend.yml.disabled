name: Deploy Backend to ECS

on:
  push:
    branches: [main]
    paths:
      - 'my-art-battle-app/server.js'
      - 'my-art-battle-app/db.js'
      - 'my-art-battle-app/knexfile.js'
      - 'my-art-battle-app/Dockerfile'
      - 'my-art-battle-app/backend/**'
      - 'my-art-battle-app/utils/**'
      - '.github/workflows/deploy-backend.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        working-directory: my-art-battle-app
        env:
          ECR_REGISTRY: 311420043539.dkr.ecr.ca-central-1.amazonaws.com
          ECR_REPOSITORY: art-battle-app
          IMAGE_TAG: v2
        run: |
          docker build --platform=linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS service with new image
        uses: aws-actions/amazon-ecs-update-service@v1
        with:
          cluster: ${{ secrets.ECS_CLUSTER }}
          service: ${{ secrets.ECS_SERVICE }}
          force-new-deployment: true